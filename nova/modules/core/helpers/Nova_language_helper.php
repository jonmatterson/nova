<?php if (!defined('BASEPATH')) exit('No direct script access allowed');
/**
 * CodeIgniter
 *
 * An open source application development framework for PHP 4.3.2 or newer
 *
 * @package		CodeIgniter
 * @author		ExpressionEngine Dev Team
 * @copyright	Copyright (c) 2006, EllisLab, Inc.
 * @license		http://codeigniter.com/user_guide/license.html
 * @link		http://codeigniter.com
 * @since		Version 1.0
 * @filesource
 */
// ------------------------------------------------------------------------
/**
 * CodeIgniter Language Helpers
 *
 * @package		CodeIgniter
 * @subpackage	Helpers
 * @category	Helpers
 * @author		ExpressionEngine Dev Team
 * @link		http://codeigniter.com/user_guide/helpers/language_helper.html
 */
// ------------------------------------------------------------------------
/**
 * Output
 *
 * Fetches a language variable and outputs that text with an HTML element
 *
 * @access	public
 * @param	string	the language line
 * @param	string	the element (P by default, can also be an H tag)
 * @return	string
 */	
if ( ! function_exists('lang_output'))
{
	function lang_output($line, $element = 'p', $class = NULL, $nl2br = TRUE)
	{
		$CI =& get_instance();
		$line = $CI->lang->line($line);
		$class_var = NULL;
		
		/* set the class variable */
		$class_var = (isset($class)) ? ' class="' . $class . '"' : NULL;
		
		/* set the content */
		$content = ($nl2br == TRUE) ? nl2br($line) : $line;
		
		/* set the elements */
		$start_element = ($element == '') ? NULL : '<'. $element . $class_var .'>';
		$end_element = ($element == '') ? NULL : '</'. $element .'>';
		
		/* set up the entire element */
		$retval = $start_element . $content . $end_element;
		
		/* return the element */
		return $retval;
	}
}
// ------------------------------------------------------------------------
/**
 * Text Output
 *
 * Outputs text with an HTML element
 *
 * @access	public
 * @param	string	the text
 * @param	string	the element (P by default, can also be an H tag)
 * @param	string	a class
 * @return	string
 */	
if ( ! function_exists('text_output'))
{
	function text_output($text = '', $element = 'p', $class = NULL, $nl2br = TRUE, $br2p = TRUE)
	{
		/* set the class variable */
		$class_var = (isset($class)) ? ' class="' . $class . '"' : NULL;
		
		/* set the content */
		$content = ($nl2br == TRUE) ? nl2br($text) : $text;
		
		/* set the elements */
		$start_element = ($element == '') ? NULL : '<'. $element . $class_var .'>';
		$end_element = ($element == '') ? NULL : '</'. $element .'>';
		
		/* normalize <br><br> as multiple paragraphs - in the case of p tag,
		 * use the p elements generated by this function, while in the case of
		 * no specified tag, then we pass NULL and let br2p wrap it in standard
		 * p tags */
		if($br2p && ($element == 'p' || $element == '' || !$element)) 
			return br2p($content, $start_element, $end_element);
		
		/* set up the entire element */
		$retval = $start_element . $content . $end_element;
		
		/* return the element */
		return $retval;
	}
}
if ( ! function_exists('br2p'))
{
	function br2p($text, $start_element = null, $end_element = null)
	{
		if(!$start_element) $start_element = '<p>';
		if(!$end_element) $end_element = '</p>';
		
		/* explode elements on <br /> */
		$text = explode('<br />', preg_replace('/<br[^>]*?>/', '<br />', $text));
		
		/* when last empty: add line break with a br */
		$last_empty = true;
		
		/* when outside p: add br if line is empty or start p */
		$out_of_element = false;
		
		$str = $start_element;
		foreach($text as $sub)
		{
			$len_0 = (strlen(trim($sub)) == 0);
			
			if($len_0)
			{
				if(!$out_of_element)
					$str .= $end_element;
				else
					$str .= '<br>';
			}
			else
			{
				if($out_of_element)
				{
					$str .= $start_element;
					$out_of_element = false;
				}
				elseif(!$last_empty)
				{
					$str .= '<br>';
				}
				$str .= $sub;
			}
			
			if($len_0)
				$out_of_element = true;
			
			$last_empty = $len_0;
		}
		$str .= $end_element;
		return $str;
	}
}
